<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.qiaoyansong.dao.AuctionMapper">
    <insert id="uploadAuction">
        insert into auction(title, content, begin_time, end_time, pubdate, min_price, img, summary)
        values (#{title}, #{content}, #{beginTime}, #{endTime}, now(), #{minPrice}, #{img}, #{summary})
    </insert>
    <select id="getAuction" resultType="Auction">
        select id, title, begin_time, end_time, min_price, img, summary
        from
        auction
        <where>
            <if test="condition.searchValue!=null">
                <bind name="base" value="'%'+condition.searchValue+'%'"/>
                and title like #{base}
            </if>
        </where>
        order by id ${condition.orderBy}
        limit #{beginIndex}, #{pageSize}
    </select>
    <select id="getTotalSize" resultType="integer">
        select count(id)
        from
        auction
        <where>
            <if test="searchValue!=null">
                <bind name="base" value="'%'+searchValue+'%'"/>
                and title like #{base}
            </if>
        </where>
    </select>
    <delete id="deleteAuctionByID">
        delete from auction where id = #{id}
    </delete>
    <update id="updateAuctionByID">
        update auction
        set
                title =#{title},
                begin_time =#{beginTime},
                end_time =#{endTime},
                min_price =#{minPrice},
                summary =#{summary}
            where
            id = #{id}
    </update>
    <select id="getAuctionInfoById" resultType="Auction">
        select id, title, begin_time, end_time, min_price, img, summary, content
        from
        auction
        where
            id = #{id}
    </select>
    <resultMap id="auctionRealtimePrice" type="AuctionRealtimePrice">
        <result column="time" property="time"/>
        <result column="price" property="price"/>
        <association property="user" javaType="com.qiaoyansong.entity.background.User">
            <id property="id" column="id"/>
            <result property="userName" column="user_name"/>
            <result property="headPortrait" column="head_portrait"/>
        </association>
    </resultMap>
    <select id="getAuctionRealtimePrice" resultMap="auctionRealtimePrice">
        select time, price, a.user_id, u.id, u.user_name, u.head_portrait
        from
                auction_realtime_price a
                inner join
                user u on a.user_id = u.id
        where auction_id = #{id}
        order by price desc limit 0,5
    </select>
    <select id="selectMaxAuctionRealtimePrice" resultMap="auctionRealtimePrice">
        select time, price, a.user_id, u.id, u.user_name, u.head_portrait
        from
                auction_realtime_price a
                inner join
                user u on a.user_id = u.id
        where auction_id = #{id}
        order by price desc limit 0,1
    </select>
    <select id="getMaxPriceByAuctionId" resultType="_int">
        select max(price)
        from
                auction_realtime_price
        group by auction_id
        having auction_id = #{auctionId}
    </select>
    <insert id="offer">
        insert into auction_realtime_price(auction_id, time, user_id, price)
            values (#{auctionId}, now(), #{userId}, #{price})
    </insert>
    <select id="getSignUpAuctionTotalSize" resultType="integer">
        select
                count(distinct auction_id)
        from
                auction_realtime_price
        GROUP BY user_id
        having user_id = #{userId}
    </select>
    <select id="getSignUpAuction" resultType="Auction">
        select
                id, end_time, begin_time, title
        from
                auction
        where id in ( select
                              count(distinct auction_id)
                      from
                              auction_realtime_price
                      GROUP BY user_id
                      having user_id = #{condition.userId})
        order by id ${condition.orderBy}
        limit #{beginIndex}, #{pageSize}
    </select>
    <select id="getIsPayment" resultType="DeliverAuction">
        select auction_id, user_id
        from
                deliver_auction
        where auction_id = #{auctionId}
        and user_id = #{userId}
    </select>
    <insert id="deliverAuction">
        insert into deliver_auction(auction_id, user_id, user_locations_id)
            values (#{auctionId}, #{userId}, #{userLocationsId})
    </insert>
    <select id="getExchangeAuctionTotalSize" resultType="_int">
        select count(id)
        from deliver_auction
        <where>
            <if test="userId != null">
                user_id = #{userId}
            </if>
        </where>
    </select>
    <resultMap id="deliverAuction" type="DeliverAuction">
        <id property="id" column="id"/>
        <result property="flag" column="flag"/>
        <association property="userLocations" javaType="com.qiaoyansong.entity.background.UserLocations">
            <id property="id" column="user_locations_id"/>
            <result property="area" column="area"/>
            <result property="city" column="city"/>
            <result property="location" column="location"/>
            <result property="name" column="name"/>
            <result property="province" column="province"/>
            <result property="telephone" column="telephone"/>
        </association>
        <association property="auction" javaType="com.qiaoyansong.entity.background.Auction">
            <id property="id" column="auction_id"/>
            <result property="title" column="title"/>
        </association>
    </resultMap>
    <select id="getExchangeAuctionListByUserId" resultMap="deliverAuction">
        select d.id, d.user_locations_id, d.auction_id, d.flag, u.area, u.city, u.location, u.name, u.province, u.telephone, a.title from
        deliver_auction d inner join auction a
        on d.auction_id = a.id inner join user_locations u on d.user_locations_id = u.id
        <where>
            <if test="condition.userId != null">
                d.user_id = #{condition.userId}
            </if>
        </where>
        order by d.id ${condition.orderBy}
        limit #{beginIndex}, #{pageSize}
    </select>
    <update id="deliverAuctionById">
        update deliver_auction set flag = 1
        where id = #{deliverAuctionId}
    </update>
</mapper>